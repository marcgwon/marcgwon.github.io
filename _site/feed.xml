<?xml version="1.0" encoding="utf-8"?><feed xmlns="http://www.w3.org/2005/Atom" ><generator uri="https://jekyllrb.com/" version="3.8.3">Jekyll</generator><link href="http://localhost:4000/hydeout/feed.xml" rel="self" type="application/atom+xml" /><link href="http://localhost:4000/hydeout/" rel="alternate" type="text/html" /><updated>2018-07-06T08:49:45+09:00</updated><id>http://localhost:4000/hydeout/</id><title type="html">Hydeout</title><subtitle>The &lt;a href=&quot;http://hyde.getpoole.com&quot; target=&quot;_blank&quot;&gt;Hyde&lt;/a&gt; theme for &lt;a href=&quot;http://jekyllrb.com&quot; target=&quot;_blank&quot;&gt;Jekyll&lt;/a&gt;, refreshed.</subtitle><author><name>Andrew Fong</name></author><entry><title type="html">Minimal_Git_command</title><link href="http://localhost:4000/hydeout/%EA%B5%AC%EC%84%B1/2018/07/06/Minimal_Git_command.html" rel="alternate" type="text/html" title="Minimal_Git_command" /><published>2018-07-06T00:00:00+09:00</published><updated>2018-07-06T00:00:00+09:00</updated><id>http://localhost:4000/hydeout/%EA%B5%AC%EC%84%B1/2018/07/06/Minimal_Git_command</id><content type="html" xml:base="http://localhost:4000/hydeout/%EA%B5%AC%EC%84%B1/2018/07/06/Minimal_Git_command.html">&lt;h1 id=&quot;minimal_git_command&quot;&gt;Minimal_Git_command&lt;/h1&gt;

&lt;p&gt;Git 을 사용하면서 자주 사용하는 명령어들에 대해 정리한 repository 입니다.&lt;/p&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;basic&quot;&gt;Basic&lt;/h2&gt;

&lt;h4 id=&quot;add&quot;&gt;add&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add [file name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;변경-사항이-있는-모든-파일-add&quot;&gt;변경 사항이 있는 모든 파일 add&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git add .
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;commit-message-와-commit&quot;&gt;commit message 와 commit&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -m &quot;[commit message]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;변경-사항이-있는-모든-파일-add-와-동시에-commit&quot;&gt;변경 사항이 있는 모든 파일 add 와 동시에 commit&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -am &quot;[commit message]&quot;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;remote-repository-등록하기&quot;&gt;remote repository 등록하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add [remote github repository address]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;특정-branch-생성하며-remote-에-push-하기&quot;&gt;특정 branch 생성하며 remote 에 push 하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git push origin [branch name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;branch-간-이동하기&quot;&gt;branch 간 이동하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout [branch name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;branch-생성하기&quot;&gt;branch 생성하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -b [branch name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;branch-이름-바꾸기&quot;&gt;branch 이름 바꾸기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git branch -M [changed name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;이전-commit-과-비교하여-파일-변경-사항-확인하기&quot;&gt;이전 commit 과 비교하여 파일 변경 사항 확인하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git diff
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;commit-log-보기&quot;&gt;commit log 보기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;git-log-graph-로-출력하기&quot;&gt;git log graph 로 출력하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git log --graph
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;useful-command&quot;&gt;Useful command&lt;/h2&gt;

&lt;h4 id=&quot;변경-사항이-있는-파일-변경-사항-취소하기&quot;&gt;변경 사항이 있는 파일 변경 사항 취소하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git checkout -- [file name]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;commit-한-개-취소하기&quot;&gt;commit 한 개 취소하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reset HEAD^
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git revert HEAD
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;바로-이전-commit-message-수정하기&quot;&gt;바로 이전 commit message 수정하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;local-git-repository-에-remote-repository-을-upstream-으로-등록하기&quot;&gt;local git repository 에 remote repository 을 upstream 으로 등록하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git remote add --track master upstream [remote github repository address]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;master-branch-를-uptream-의-latest-version-으로-update-시키기&quot;&gt;master branch 를 uptream 의 latest version 으로 update 시키기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git pull --ff upstream master
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;여러-commit-을-하나로-합치기squash&quot;&gt;여러 commit 을 하나로 합치기(squash)&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rebase -i HEAD~[commit 개수]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt;에서 설정해둔 editor 창이 나타난다. 기준이 될 맨 위의 한 commit 만 &lt;code class=&quot;highlighter-rouge&quot;&gt;pick&lt;/code&gt;으로 두고 나머지는 &lt;code class=&quot;highlighter-rouge&quot;&gt;squash&lt;/code&gt;라는 명령어로 바꿔준다. &lt;code class=&quot;highlighter-rouge&quot;&gt;:wq&lt;/code&gt; 명령어를 통해 저장하고 종료한다. 그러면 또 다른 editor 창이 나타나는데, commit message 를 설정하는 editor 이다. 원하는 commit message 를 입력하고 &lt;code class=&quot;highlighter-rouge&quot;&gt;:wq&lt;/code&gt; 명령어를 통해 저장하고 종료해주면 squash 가 된다.&lt;/p&gt;

&lt;h4 id=&quot;git-history-출력하기&quot;&gt;git history 출력하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git reflog
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;바로-이전-commit-에-새로운-파일-변경-사항을-추가하기&quot;&gt;바로 이전 commit 에 새로운 파일 변경 사항을 추가하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit -C HEAD --amend
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;em&gt;cf&amp;gt; 만약 push 를 한 상태라면 &lt;code class=&quot;highlighter-rouge&quot;&gt;-f&lt;/code&gt;옵션을 통해서 push 를 해줘야 한다. commit 을 새로 생성하지 않고 변경사항을 추가하는 것처럼 보이지만 내부적으로는 새로운 커밋이 생기는 것이기 때문에 push 된 commit 과 다른 commit 이다.&lt;/em&gt;&lt;/p&gt;

&lt;h4 id=&quot;파일의-변경-이력을-무시해서-stage-에서-임시로-제외하기&quot;&gt;파일의 변경 이력을 무시해서 stage 에서 임시로 제외하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git update-index --assume-unchanged [파일명]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;파일의-변경-이력을-무시해서-stage-에서-임시로-제외한-상황을-되돌리기&quot;&gt;파일의 변경 이력을 무시해서 stage 에서 임시로 제외한 상황을 되돌리기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git update-index --no-assume-unchanged [파일명]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;현재-branch-에서-변경-사항-커밋없이-저장해두기&quot;&gt;현재 branch 에서 변경 사항 커밋없이 저장해두기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git stash
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;저장해두었던-변경-내역-불러오기&quot;&gt;저장해두었던 변경 내역 불러오기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git stash pop
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;h4 id=&quot;다른-branch-의-특정-commit-가져와서-merge-하기&quot;&gt;다른 branch 의 특정 commit 가져와서 merge 하기&lt;/h4&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git cherry-pick [COMMIT_HASH_NUMBER]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;상황에-따른-git-command-집합&quot;&gt;상황에 따른 git command 집합&lt;/h2&gt;

&lt;h3 id=&quot;상황-1-conflict-가-발생하는-상황&quot;&gt;상황 1. conflict 가 발생하는 상황&lt;/h3&gt;

&lt;p&gt;여러 가지 방법이 있지만 그 중 두 가지.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git merge upstream/master
(resolve conflict in editor)
git add src
git commit
git rebase upstream/master
(resolve conflict in editor again)
git add src
git rebase --continue
git push -f upstream YOUR_BRANCH_NAME
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;or&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git fetch upstream
git rebase upstream/master
(resolve conflict)
git add .
git rebase --continue
git push -f origin [YOUR_WORKING_BRANCH_NAME]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h3 id=&quot;상황-2-과거-commit-에-fix-한-commit-이-존재하여-이-commit-순서를-정렬하고-싶은-상황&quot;&gt;상황 2. 과거 commit 에 fix 한 commit 이 존재하여 이 commit 순서를 정렬하고 싶은 상황&lt;/h3&gt;

&lt;p&gt;어떤 commit 이 이미 올라갔는데 그 commit 에 해당하는 수정 사항이 발생하면 그에 해당하는 fix commit 을 추가할 경우가 있다. 이 때, commit 의 순서가 난잡해지는데 이 경우,&lt;code class=&quot;highlighter-rouge&quot;&gt;fixup&lt;/code&gt;과 &lt;code class=&quot;highlighter-rouge&quot;&gt;autosquash&lt;/code&gt; command 를 사용한다.&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git commit --fixup [HASH]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;이렇게 해서 해당 fix commit 을 추가해놓은 다음에&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;git rebase -i --autosquash [HASH]
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;위 명령어를 통해서 squash 해주면 커밋 순서도 정렬되면서 하나의 commit 으로 squash 된다. 위 명령어에서 &lt;code class=&quot;highlighter-rouge&quot;&gt;HASH&lt;/code&gt;란 어느 커밋부터 squash 를 할 것인가를 의미한다.&lt;/p&gt;

&lt;p&gt;&lt;em&gt;cf&amp;gt; fixup 과 squash 그리고 squeeze 의 차이점&lt;/em&gt;&lt;br /&gt;
&lt;code class=&quot;highlighter-rouge&quot;&gt;squash&lt;/code&gt;는 새로운 인터페이스가 열리면서 commit message 도 수정(포함 또는 배제)할 수 있다. &lt;code class=&quot;highlighter-rouge&quot;&gt;fixup&lt;/code&gt;은 commit message 를 &lt;code class=&quot;highlighter-rouge&quot;&gt;pick&lt;/code&gt;한 commit 에 대해서만 적용한다. &lt;code class=&quot;highlighter-rouge&quot;&gt;squeeze&lt;/code&gt;는 squash 하고자 하는 모든 commit message 를 포함하면서 squash 한다.&lt;/p&gt;

&lt;hr /&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h2 id=&quot;알아두면-쓸모있는-git-tip&quot;&gt;알아두면 쓸모있는 Git Tip&lt;/h2&gt;

&lt;h3 id=&quot;git-command-alias&quot;&gt;Git command alias&lt;/h3&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Git&lt;/code&gt;을 설치한 디렉토리에는 &lt;code class=&quot;highlighter-rouge&quot;&gt;.gitconfig&lt;/code&gt; 파일이 존재한다. 이 파일에서 자주 사용하는 명령어에 대해서 alias 를 지정해줄 수 있다.&lt;/p&gt;

&lt;pre&gt;&lt;code class=&quot;language-.gitconfig&quot;&gt;[alias]
    g = git
    st = status
    co = checkout
    ad = add
    cm = commit -m
    acm = commit -am
    ph = push
    rb = rebase -i
    fh = fetch
    df = diff
    br = branch -a
    lg = log --graph --abbrev-commit --decorate --format=format:'%C(cyan)%h%C(reset) - %C(green)(%ar)%C(reset) %C(white)%s%C(reset) %C(dim white)- %an%C(reset)%C(yellow)%d%    C(reset)' --all
    re = reset HEAD\\^
    fu = fetch upstream
    rum = rebase upstream/master
    pom = push origin master
    list = config --get-regexp alias
    readme = !git add . &amp;amp;&amp;amp; git commit -m &quot;Update README.md&quot; &amp;amp;&amp;amp; git push origin master
    docs = !git add . &amp;amp;&amp;amp; git commit -m &quot;Update&quot; &amp;amp;&amp;amp; git push origin master
    update = !git fetch upstream &amp;amp;&amp;amp; git rebase upstream/master &amp;amp;&amp;amp; git push origin master
&lt;/code&gt;&lt;/pre&gt;

&lt;p&gt;&amp;lt;/br&amp;gt;&lt;/p&gt;

&lt;h3 id=&quot;commit-log-format&quot;&gt;Commit Log format&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;제목과 본문을 빈 행으로 분리한다&lt;/li&gt;
  &lt;li&gt;제목 행을 50 자로 제한한다&lt;/li&gt;
  &lt;li&gt;제목 행 첫 글자는 대문자로 쓴다&lt;/li&gt;
  &lt;li&gt;제목 행 끝에 마침표를 넣지 않는다&lt;/li&gt;
  &lt;li&gt;제목 행에 명령문을 사용한다&lt;/li&gt;
  &lt;li&gt;본문을 72 자 단위로 개행한다&lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;어떻게 보다는 무엇과 왜를 설명한다&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;제목
    &lt;ul&gt;
      &lt;li&gt;대문자, 동사로 시작. 앞에 ‘If applied, this commit will ‘가 생략된 것으로 간주&lt;/li&gt;
      &lt;li&gt;가급적 50 자 안쪽&lt;/li&gt;
      &lt;li&gt;마침표 생략&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;본문
    &lt;ul&gt;
      &lt;li&gt;3 번째 줄부터 시작 (두번째 줄은 비움)&lt;/li&gt;
      &lt;li&gt;최대줄 너비는 80 자. 이상은 줄바꿈&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;h3 id=&quot;추천-동사personal&quot;&gt;추천 동사(personal)&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Add&lt;/code&gt; : 새로운 기능 또는 api 추가
    &lt;ul&gt;
      &lt;li&gt;예) Add API creating PDF&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Remove&lt;/code&gt; : 제거
    &lt;ul&gt;
      &lt;li&gt;예) Remove unused local variables&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Enhance&lt;/code&gt; : 기능 또는 성능의 향상
    &lt;ul&gt;
      &lt;li&gt;예) Enhance performance in select queries&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Fix&lt;/code&gt; : 버그, 오타, 스타일의 수정
    &lt;ul&gt;
      &lt;li&gt;예) Fix typos in Javadoc&lt;/li&gt;
      &lt;li&gt;예) Fix styles for standards of Naver Corp&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Upgrade&lt;/code&gt; : 라이브러리 버전 업그레이드
    &lt;ul&gt;
      &lt;li&gt;예) Uprade commons-dbcp to 2.3.1&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Document&lt;/code&gt; : 문서화&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Refactor&lt;/code&gt; : 리팩토링&lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Update&lt;/code&gt; : 다른 주변 상황에 맞추어서 갱신
    &lt;ul&gt;
      &lt;li&gt;예) Update README.md for 1.0 release&lt;/li&gt;
    &lt;/ul&gt;
  &lt;/li&gt;
  &lt;li&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;Polish&lt;/code&gt; : 잡다한 수정 묶음 (다른 적절한 문구가 없을 경우 사용)&lt;/li&gt;
&lt;/ul&gt;

&lt;h4 id=&quot;reference&quot;&gt;Reference&amp;gt;&lt;/h4&gt;

&lt;ul&gt;
  &lt;li&gt;&lt;a href=&quot;https://item4.github.io/2016-11-01/How-to-Write-a-Git-Commit-Message&quot;&gt;How to Write a Git Commit Message&lt;/a&gt;&lt;/li&gt;
&lt;/ul&gt;</content><author><name>Andrew Fong</name></author><category term="Git" /><summary type="html">Minimal_Git_command</summary></entry><entry><title type="html">깃허브 블로그 만들다</title><link href="http://localhost:4000/hydeout/nodejs/web/2018/07/01/%ED%97%AC%EB%A1%9C%EC%9A%B0-%EB%89%B4%EC%9B%94%EB%93%9C.html" rel="alternate" type="text/html" title="깃허브 블로그 만들다" /><published>2018-07-01T00:00:00+09:00</published><updated>2018-07-06T04:25:52+09:00</updated><id>http://localhost:4000/hydeout/nodejs/web/2018/07/01/%ED%97%AC%EB%A1%9C%EC%9A%B0-%EB%89%B4%EC%9B%94%EB%93%9C</id><content type="html" xml:base="http://localhost:4000/hydeout/nodejs/web/2018/07/01/%ED%97%AC%EB%A1%9C%EC%9A%B0-%EB%89%B4%EC%9B%94%EB%93%9C.html">&lt;p&gt;Hydeout updates the original &lt;a href=&quot;https://github.com/poole/hyde&quot;&gt;Hyde&lt;/a&gt;
theme for &lt;a href=&quot;http://jekyllrb.com&quot;&gt;Jekyll&lt;/a&gt; 3.x and adds new functionality.&lt;/p&gt;

&lt;h3 id=&quot;keep-it-simple&quot;&gt;Keep It Simple&lt;/h3&gt;
&lt;h3 id=&quot;3단짜리-제목&quot;&gt;3단짜리 제목&lt;/h3&gt;

&lt;p&gt;&lt;a href=&quot;http://daum.net&quot;&gt;다음주소&lt;/a&gt;&lt;/p&gt;

&lt;p&gt;In keeping with the original Hyde theme, Hydeout aims to keep the overall
design lightweight and plugin-free. JavaScript is currently limited only
to Disqus and Google Analytics (and is only loaded if you provide configuration
variables).&lt;/p&gt;

&lt;p&gt;Hydeout makes heavy use of Flexbox in its CSS. If Flexbox is not available,
the CSS degrades into a single column layout.&lt;/p&gt;

&lt;h3 id=&quot;customization&quot;&gt;Customization&lt;/h3&gt;

&lt;p&gt;Hydeout replaces Hyde’s class-based theming with the use
of the following SASS variables:&lt;/p&gt;

&lt;div class=&quot;language-scss highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;nv&quot;&gt;$sidebar-bg-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#202020&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$sidebar-sticky&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;true&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$layout-reverse&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;bp&quot;&gt;false&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;span class=&quot;nv&quot;&gt;$link-color&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;mh&quot;&gt;#268bd2&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;!&lt;/span&gt;&lt;span class=&quot;nb&quot;&gt;default&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;;&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;div class=&quot;language-js highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;kd&quot;&gt;var&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;request&lt;/span&gt; &lt;span class=&quot;o&quot;&gt;=&lt;/span&gt; &lt;span class=&quot;nx&quot;&gt;require&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'request'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;

&lt;span class=&quot;nx&quot;&gt;console&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;.&lt;/span&gt;&lt;span class=&quot;nx&quot;&gt;log&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;(&lt;/span&gt;&lt;span class=&quot;s1&quot;&gt;'Hello, javascript!'&lt;/span&gt;&lt;span class=&quot;p&quot;&gt;);&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;hr /&gt;
&lt;h1 id=&quot;인용줄인-것-같다&quot;&gt;인용줄인 것 같다&lt;/h1&gt;
&lt;hr /&gt;
&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
# 인용 + 코드
---

동해물과 백두산이 마르고 닳도록 `우리나라`.

&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;&lt;code class=&quot;highlighter-rouge&quot;&gt;헬로우 월드?&lt;/code&gt;&lt;/p&gt;

&lt;ul&gt;
  &lt;li&gt;리액트&lt;/li&gt;
  &lt;li&gt;노드JS&lt;/li&gt;
  &lt;li&gt;타입스크립트&lt;/li&gt;
  &lt;li&gt;텐서플로우&lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;To override these variables, create your own &lt;code class=&quot;highlighter-rouge&quot;&gt;assets/css/main.scss&lt;/code&gt; file.
Define your own variables, then import in Hydeout’s SCSS, like so:&lt;/p&gt;

&lt;div class=&quot;highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;---
# Jekyll needs front matter for SCSS files
---

$sidebar-bg-color: #ac4142;
$link-color: #ac4142;
$sidebar-sticky: false;
@import &quot;hydeout&quot;;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;&lt;/div&gt;

&lt;p&gt;See the &lt;a href=&quot;_sass/hydeout/_variables.scss&quot;&gt;_variables&lt;/a&gt; file for other variables
you can override.&lt;/p&gt;

&lt;p&gt;You can also insert custom head tags (e.g. to load your own stylesheets) by
defining your own &lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/custom-head.html&lt;/code&gt; or insert tags at the end
of the body (e.g. for custom JS) by defining your own
&lt;code class=&quot;highlighter-rouge&quot;&gt;_includes/custom-foot.html&lt;/code&gt;.&lt;/p&gt;

&lt;h3 id=&quot;new-features&quot;&gt;New Features&lt;/h3&gt;

&lt;ul&gt;
  &lt;li&gt;
    &lt;p&gt;Hydeout also adds a new tags page (accessible in the sidebar) and a new
“category” layout for dedicated category pages.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Category pages are automatically added to the sidebar. All other pages
must have &lt;code class=&quot;highlighter-rouge&quot;&gt;sidebar_link: true&lt;/code&gt; in their front matter to show up in
the sidebar.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;A simple redirect-to-Google search is available. If you want to use
Google Custom Search or Algolia or something with more involved,
override the &lt;code class=&quot;highlighter-rouge&quot;&gt;search.html&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;Disqus integration is ready out of the box. Just add the following to
your config file:&lt;/p&gt;

    &lt;div class=&quot;language-yaml highlighter-rouge&quot;&gt;&lt;div class=&quot;highlight&quot;&gt;&lt;pre class=&quot;highlight&quot;&gt;&lt;code&gt;&lt;span class=&quot;na&quot;&gt;disqus&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt;
  &lt;span class=&quot;na&quot;&gt;shortname&lt;/span&gt;&lt;span class=&quot;pi&quot;&gt;:&lt;/span&gt; &lt;span class=&quot;s&quot;&gt;my-disqus-shortname&lt;/span&gt;
&lt;/code&gt;&lt;/pre&gt;&lt;/div&gt;    &lt;/div&gt;

    &lt;p&gt;If you don’t want Disqus or want to use something else, override
&lt;code class=&quot;highlighter-rouge&quot;&gt;comments.html&lt;/code&gt;.&lt;/p&gt;
  &lt;/li&gt;
  &lt;li&gt;
    &lt;p&gt;For Google Analytics support, define a &lt;code class=&quot;highlighter-rouge&quot;&gt;google_analytics&lt;/code&gt; variable with
your property ID in your config file.&lt;/p&gt;
  &lt;/li&gt;
&lt;/ul&gt;

&lt;p&gt;There’s also a bunch of minor tweaks and adjustments throughout the
theme. Hope this works for you!&lt;/p&gt;</content><author><name>Andrew Fong</name></author><category term="Nodejs" /><category term="Web" /><category term="js" /><category term="css" /><summary type="html">Hydeout updates the original Hyde theme for Jekyll 3.x and adds new functionality. Keep It Simple 3단짜리 제목 다음주소 In keeping with the original Hyde theme, Hydeout aims to keep the overall design lightweight and plugin-free. JavaScript is currently limited only to Disqus and Google Analytics (and is only loaded if you provide configuration variables). Hydeout makes heavy use of Flexbox in its CSS. If Flexbox is not available, the CSS degrades into a single column layout. Customization Hydeout replaces Hyde’s class-based theming with the use of the following SASS variables: $sidebar-bg-color: #202020 !default; $sidebar-sticky: true !default; $layout-reverse: false !default; $link-color: #268bd2 !default; var request = require('request'); console.log('Hello, javascript!'); 인용줄인 것 같다 --- # 인용 + 코드 --- 동해물과 백두산이 마르고 닳도록 `우리나라`. 헬로우 월드? 리액트 노드JS 타입스크립트 텐서플로우 To override these variables, create your own assets/css/main.scss file. Define your own variables, then import in Hydeout’s SCSS, like so: --- # Jekyll needs front matter for SCSS files --- $sidebar-bg-color: #ac4142; $link-color: #ac4142; $sidebar-sticky: false; @import &quot;hydeout&quot;; See the _variables file for other variables you can override. You can also insert custom head tags (e.g. to load your own stylesheets) by defining your own _includes/custom-head.html or insert tags at the end of the body (e.g. for custom JS) by defining your own _includes/custom-foot.html. New Features Hydeout also adds a new tags page (accessible in the sidebar) and a new “category” layout for dedicated category pages. Category pages are automatically added to the sidebar. All other pages must have sidebar_link: true in their front matter to show up in the sidebar. A simple redirect-to-Google search is available. If you want to use Google Custom Search or Algolia or something with more involved, override the search.html. Disqus integration is ready out of the box. Just add the following to your config file: disqus: shortname: my-disqus-shortname If you don’t want Disqus or want to use something else, override comments.html. For Google Analytics support, define a google_analytics variable with your property ID in your config file. There’s also a bunch of minor tweaks and adjustments throughout the theme. Hope this works for you!</summary></entry></feed>